<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wayne&#39;s blog</title>
  
  <subtitle>一个有情调的程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-06T08:48:56.804Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>侯骅十</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解Tomcat之一：Tomcat基础架构</title>
    <link href="http://yoursite.com/posts/24480/"/>
    <id>http://yoursite.com/posts/24480/</id>
    <published>2019-07-06T09:26:18.000Z</published>
    <updated>2019-07-06T08:48:56.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解Tomcat之一：Tomcat基础架构"><a href="#深入理解Tomcat之一：Tomcat基础架构" class="headerlink" title="深入理解Tomcat之一：Tomcat基础架构"></a>深入理解Tomcat之一：Tomcat基础架构</h1><h2 id="Tomcat的定义（来自wiki百科）"><a href="#Tomcat的定义（来自wiki百科）" class="headerlink" title="Tomcat的定义（来自wiki百科）"></a>Tomcat的定义（来自wiki百科）</h2><pre><code>Tomcat是由Apache软件基金会下属的Jakarta项目开发的一个**Servlet容器**，按照Sun Microsystems提供的技术规范，实现了对Servlet和JavaServer Page（JSP）的支持，并提供了作为Web服务器的一些特有功能，如**Tomcat管理和控制平台、安全域管理和Tomcat阀**等。</code></pre><p>由于Tomcat本身也内含了一个HTTP服务器，它也可以被视作一个单独的Web服务器。</p><h2 id="Http服务器与应用服务器"><a href="#Http服务器与应用服务器" class="headerlink" title="Http服务器与应用服务器"></a>Http服务器与应用服务器</h2><pre><code>之前在技术讨论群里看到一个群友提问：nginx和tomcat有什么区别呀？其实提出这种问题就可以得知他对两个服务器的基础概念都还不是很清晰。严格来讲，Nginx、Apache这些叫做Http Server； 而Tomcat是Application Server，更准确的说，是一个Servlet、Jsp容器。 一个 **HTTP Server 关心的是 HTTP 协议层面的传输和访问控制**，所以在 Apache/Nginx 上你可以看到**代理、负载均衡**等功能。客户端通过 HTTP Server 访问服务器上存储的资源（HTML 文件、图片文件等等）。一个 HTTP Server 始终只是把服务器上的文件如实的通过 HTTP 协议传输给客户端。对于 Tomcat 来说，就是需要**提供 JSP/Sevlet 运行需要的标准类库、Interface 等**。为了方便，应用服务器往往也会集成 HTTP Server 的功能，但是不如专业的 HTTP Server 那么强大，所以应用服务器往往是运行在 HTTP Server 的背后，执行应用，将动态的内容转化为静态的内容之后，通过 HTTP Server 分发到客户端。回到上面的问题，在我的理解看来，Nginx更像一个协调管理者的角色，而Tomcat用“容器”这个词语形容它会更加形象贴切一点。</code></pre><h2 id="Tomcat的整体架构"><a href="#Tomcat的整体架构" class="headerlink" title="Tomcat的整体架构"></a>Tomcat的整体架构</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images-cdn.shimo.im/HXQSiPn6iJ0hiTzk/image.png!original" alt title>                </div>                <div class="image-caption"></div>            </figure><pre><code>Tomcat最顶层的容器是Server， 代表整个服务器，从上图可以看出一个 Server至少包含 一个Service，用于具体提供服务。</code></pre><h3 id="两个主要组件"><a href="#两个主要组件" class="headerlink" title="两个主要组件"></a>两个主要组件</h3><h4 id="Connecter"><a href="#Connecter" class="headerlink" title="Connecter"></a>Connecter</h4><pre><code>用于**处理连接相关**的事，并提供**Socket**与Request和Response相关的转化;</code></pre><h5 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h5><pre><code>一个Connecter将在某个指定的**端口上侦听客户请求，接收浏览器的发过来的 tcp 连接请求，创建一个 Request 和 Response 对象分别用于和请求端交换数据**，然后会产生一个线程来处理这个请求并把产生的 Request 和 Response 对象传给处理Engine(Container中的一部分)，从Engine出获得响应并返回客户。Tomcat中有两个经典的Connector，</code></pre><ul><li><p>一个直接侦听来自Browser的HTTP请求，</p></li><li><p>另外一个来自其他的WebServer请求。</p></li></ul><p>HTTP/1.1 Connector在端口8080处侦听来自客户Browser的HTTP请求，AJP/1.3 Connector在端口8009处侦听其他Web Server（其他的HTTP服务器）的Servlet/JSP请求。</p><p>Connector 最重要的功能就是接收连接请求然后分配线程让 Container 来处理这个请求，所以这必然是多线程的，多线程的处理是 Connector 设计的核心。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images-cdn.shimo.im/HF9ScgG4RrsO003A/image.png!thumbnail" alt title>                </div>                <div class="image-caption"></div>            </figure><p>Connector 中具体是用<strong>ProtocolHandler</strong> 来处理请求的，不同的ProtocolHandler 代表不同的连接类型，比如， Http11Protocol 使用的是普通Socket 来连接的， Http 11 NioProtocol 使用的是NioSocket 来连接的。</p><p>ProtocolHandler 里面有3 个非常重要的组件： Endpoint 、Processor 和Adapter。</p><ul><li><p><strong>Endpoint</strong>用于处理底层Socket 的网络连接，</p><ul><li><p><strong>Acceptor</strong> 用于监昕请求</p></li><li><p><strong>AsyncTimeout</strong> 用于检查异步request 的超时</p></li><li><p><strong>Handler</strong> 用于处理接收到的Socket，在内部调用了Processor 进行处理。</p></li></ul></li><li><p><strong>Processor</strong> 用于将Endpoint 接收到的Socket 封装成Request,</p></li><li><p><strong>Adapter</strong> 用于将封装好的Request 交给Container 进行具体处理。</p></li></ul><p><strong><em>也就是说Endpoint用来实现TCP/IP 协议， Processor 用来实现HTTP 协议， Adapter 将请求适配到Servlet 容器进行具体处理。</em></strong></p><h4 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h4><pre><code>用于**封装和管理Servlet**，以及具体**处理Request请求**；</code></pre><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://images-cdn.shimo.im/pZ1MD2LFC1ojN7Fa/image.png!thumbnail" alt title>                </div>                <div class="image-caption"></div>            </figure><p>Container用于封装和管理Servlet，以及具体处理Request请求，在Connector内部包含了4个子容器。</p><p>4个子容器的作用分别是：</p><p>（1）Engine：引擎，用来管理多个站点，一个Service最多只能有一个Engine；</p><p>（2）Host：代表一个站点，也可以叫虚拟主机，通过配置Host就可以添加站点；</p><p>（3）Context：代表一个应用程序，对应着平时开发的一套程序，或者一个WEB-INF目录以及下面的web.xml文件；</p><p>（4）Wrapper：每一Wrapper封装着一个Servlet；</p><h3 id="其他组件"><a href="#其他组件" class="headerlink" title="其他组件"></a>其他组件</h3><ul><li><p><strong>Jasper</strong>：负责jsp页面的解析，jsp属性的验证,同时负责将jsp动态转换为java代码并编译成class。</p></li><li><p><strong>Naming</strong>：资源管理，负责数据库连接池、EJB、mail等通过JDNI获取的内容。</p></li><li><p><strong>Session</strong>：会话管理的组件</p></li><li><p><strong>Logging</strong>：日志相关</p></li><li><p><strong>JMX</strong>：性能监控等</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解Tomcat之一：Tomcat基础架构&quot;&gt;&lt;a href=&quot;#深入理解Tomcat之一：Tomcat基础架构&quot; class=&quot;headerlink&quot; title=&quot;深入理解Tomcat之一：Tomcat基础架构&quot;&gt;&lt;/a&gt;深入理解Tomcat之一：Tomc
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解Tomcat之二：自己动手实现一个简单的Tomcat</title>
    <link href="http://yoursite.com/posts/6083/"/>
    <id>http://yoursite.com/posts/6083/</id>
    <published>2019-07-06T09:26:18.000Z</published>
    <updated>2019-07-06T08:49:43.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解Tomcat之二：自己动手实现一个简单的Tomcat"><a href="#深入理解Tomcat之二：自己动手实现一个简单的Tomcat" class="headerlink" title="深入理解Tomcat之二：自己动手实现一个简单的Tomcat"></a>深入理解Tomcat之二：自己动手实现一个简单的Tomcat</h1><pre><code>学习一个新的知识的过程就是 看别人的文章、听别人讲、自己查资料、自己给别人讲。我们对于新知识的认识成都以及理解深度都是在整个过程中不断的加深的。所以我一直提倡大家要乐于分享，当你给别人用组织系统化的语言或者文章将你头脑中的知识输出来，你就会发现，你对之前知识的理解又加深了一个程度。而这一篇手写tomcat，其实也是我在学习tomcat架构的过程中，模仿别人的代码自己再手敲一遍，最后将思路和实现过程整理成文，输出给大家。</code></pre><h2 id="主要需求"><a href="#主要需求" class="headerlink" title="主要需求"></a>主要需求</h2><ul><li><p>监听请求端口</p></li><li><p>封装请求和返回</p></li><li><p>对请求进行处理</p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://blog-images-1251718931.cos.ap-guangzhou.myqcloud.com/19070601.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>上面就是mini tomcat的类图</p><h2 id="各个类"><a href="#各个类" class="headerlink" title="各个类"></a>各个类</h2><h3 id="MyRequest"><a href="#MyRequest" class="headerlink" title="MyRequest"></a>MyRequest</h3><pre><code>自己封装的请求类，相当于servlet中的HttpRequest。</code></pre><ul><li><p>inputStream来自于socket的输入流，用浏览器访问的时候就会包含了整个请求的报文</p></li><li><p>解析http请求头的第一行 拿出协议中的 GET 或者 POST 还有请求url</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己封装的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String httpRequest = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] requestBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> length = inputStream.read(requestBytes);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            httpRequest = <span class="keyword">new</span> String(requestBytes, <span class="number">0</span>, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解析内容</span></span><br><span class="line">        <span class="comment">// 第一行是http头部内容</span></span><br><span class="line">        String httpHead = httpRequest.split(<span class="string">"\n"</span>)[<span class="number">0</span>];</span><br><span class="line">        url = httpHead.split(<span class="string">"\\s"</span>)[<span class="number">1</span>];</span><br><span class="line">        method = httpHead.split(<span class="string">"\\s"</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"接收到请求-------》"</span>);</span><br><span class="line">        System.out.println(<span class="string">"请求信息 ："</span> + toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"url: "</span> + url + <span class="string">", method: "</span> + method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyResponse"><a href="#MyResponse" class="headerlink" title="MyResponse"></a>MyResponse</h3><ul><li>要点在于手动按照http协议的格式进行响应，这样浏览器才可以识别</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己封装的响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> OutputStream outputStream;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyResponse</span><span class="params">(OutputStream outputStream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.outputStream = outputStream;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String content)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outputStream!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            StringBuffer httpResponse = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 按照http响应格式输出</span></span><br><span class="line">            httpResponse.append(<span class="string">"HTTP/1.1 200 OK\n"</span>)</span><br><span class="line">                    .append(<span class="string">"Content-Type: text/html\n"</span>)</span><br><span class="line">                    .append(<span class="string">"\r\n"</span>)</span><br><span class="line">                    .append(<span class="string">"&lt;html&gt;&lt;body&gt;"</span>)</span><br><span class="line">                    .append(content)</span><br><span class="line">                    .append(<span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"返回信息："</span>+httpResponse.toString());</span><br><span class="line"></span><br><span class="line">            outputStream.write(httpResponse.toString().getBytes());</span><br><span class="line">            outputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyServlet"><a href="#MyServlet" class="headerlink" title="MyServlet"></a>MyServlet</h3><pre><code>抽象的Servlet，可以继承它来有很多不同的实现.</code></pre><ul><li>service 方法根据请求的方法分发到get或者post进行处理，这里与</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己封装的Servlet</span></span><br><span class="line"><span class="comment"> * 继承后做不同的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(MyRequest httpRequest, MyResponse httpResponse)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(MyRequest httpRequest, MyResponse httpResponse)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(MyRequest request, MyResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(request!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"POST"</span>.equalsIgnoreCase(request.getMethod())) &#123;</span><br><span class="line">                doPost(request, response);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"GET"</span>.equalsIgnoreCase(request.getMethod())) &#123;</span><br><span class="line">                doGet(request, response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="HelloServlet"><a href="#HelloServlet" class="headerlink" title="HelloServlet"></a>HelloServlet</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet的实现类，在post get中添加具体的业务逻辑</span></span><br><span class="line"><span class="comment"> * 以前使用servlet编程的时候也是这样的实现方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">MyServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(MyRequest httpRequest, MyResponse httpResponse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpResponse.write(<span class="string">"get method in hello servlet !!"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(MyRequest httpRequest, MyResponse httpResponse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            httpResponse.write(<span class="string">"post method in hello servlet"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletMapping"><a href="#ServletMapping" class="headerlink" title="ServletMapping"></a>ServletMapping</h3><pre><code>其实是一个Bean，简单封装了配置信息，方便我们读取。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletMapping</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String servletName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String clazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServletMapping</span><span class="params">(String servletName, String url, String clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletName = servletName;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> servletName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setServletName</span><span class="params">(String servletName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.servletName = servletName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClazz</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClazz</span><span class="params">(String clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletMappingConfig"><a href="#ServletMappingConfig" class="headerlink" title="ServletMappingConfig"></a>ServletMappingConfig</h3><p>存着一个列表来保存配置，真正tomcat也不是这样实现的。我们只是为了效果方便实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里由于是demo 采用简洁的方式先进行配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletMappingConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;ServletMapping&gt; config = <span class="keyword">new</span> ArrayList&lt;ServletMapping&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在真正的tomcat中是扫描web.xml的配置来初始化ServletMapping</span></span><br><span class="line">   <span class="keyword">static</span>  &#123;</span><br><span class="line">        config.add(<span class="keyword">new</span> ServletMapping(<span class="string">"hello"</span>, <span class="string">"/hello"</span>, <span class="string">"com.practice.HelloServlet"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MyTomcat"><a href="#MyTomcat" class="headerlink" title="MyTomcat"></a>MyTomcat</h3><p>minitomcat的核心类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTomcat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> port = <span class="number">8080</span>;</span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, String&gt; mapping = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyTomcat</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用socket不断等候接收新的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        initservletMappings();</span><br><span class="line"></span><br><span class="line">        ServerSocket socket = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            socket = <span class="keyword">new</span> ServerSocket(port);</span><br><span class="line">            System.out.println(<span class="string">"Tomcat 启动成功～～"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Socket accept = socket.accept();</span><br><span class="line">                InputStream inputStream = accept.getInputStream();</span><br><span class="line">                OutputStream outputStream = accept.getOutputStream();</span><br><span class="line"></span><br><span class="line">                MyRequest myRequest = <span class="keyword">new</span> MyRequest(inputStream);</span><br><span class="line">                MyResponse myResponse = <span class="keyword">new</span> MyResponse(outputStream);</span><br><span class="line"></span><br><span class="line">                dispatch(myRequest, myResponse);</span><br><span class="line"></span><br><span class="line"><span class="comment">//                socket.close();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取配置文件初始化servletMapping</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initservletMappings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ServletMapping servletMapping : ServletMappingConfig.config) &#123;</span><br><span class="line">            mapping.put(servletMapping.getUrl(), servletMapping.getClazz());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取配置找到对应的Servlet类，使用反射创建实例处理请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span>  <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(MyRequest request, MyResponse response)</span> </span>&#123;</span><br><span class="line">        String url = request.getUrl();</span><br><span class="line">        String clazz = mapping.get(url);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(clazz==<span class="keyword">null</span> || clazz==<span class="string">""</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"没有找到请求对应的链接:"</span> + url);</span><br><span class="line">            System.out.println();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;MyServlet&gt; aClass = (Class&lt;MyServlet&gt;) Class.forName(clazz);</span><br><span class="line">            MyServlet myServlet = aClass.newInstance();</span><br><span class="line">            myServlet.service(request, response);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"不存在该类"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动tomcat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyTomcat(<span class="number">8081</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们运行main方法，在浏览器中访问localhost:8081/hello 就可以看到效果啦！</p>{% image https://blog-images-1251718931.cos.ap-guangzhou.myqcloud.com/2019070602.png '' '' %}<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre><code>这个tomcat很mini ，只简单实现了基本的功能，大家可以在这个基础上不断添加其他的功能，让这个minitomcat越来越接近真正的tomct！！</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解Tomcat之二：自己动手实现一个简单的Tomcat&quot;&gt;&lt;a href=&quot;#深入理解Tomcat之二：自己动手实现一个简单的Tomcat&quot; class=&quot;headerlink&quot; title=&quot;深入理解Tomcat之二：自己动手实现一个简单的Tomcat&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring中的事件简述与Guava的EventBus</title>
    <link href="http://yoursite.com/posts/38349/"/>
    <id>http://yoursite.com/posts/38349/</id>
    <published>2019-06-11T09:26:18.000Z</published>
    <updated>2019-06-11T09:27:22.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring中的事件简述与Guava的EventBus"><a href="#Spring中的事件简述与Guava的EventBus" class="headerlink" title="Spring中的事件简述与Guava的EventBus"></a>Spring中的事件简述与Guava的EventBus</h1><h2 id="Spring的事件"><a href="#Spring的事件" class="headerlink" title="Spring的事件"></a>Spring的事件</h2><h3 id="关键类"><a href="#关键类" class="headerlink" title="关键类"></a>关键类</h3><ol><li><p>org.springframework.context.ApplicationEvent</p></li><li><p>org.springframework.context.ApplicationListener</p></li></ol><p>使用容器触发事件，applicationContext发布事件。</p><h3 id="简单实现逻辑"><a href="#简单实现逻辑" class="headerlink" title="简单实现逻辑"></a>简单实现逻辑</h3><ol><li><p>自定义订阅和通知事件，继承ApplicationEvent</p></li><li><p>定义事件监听器，实现ApplicationListener</p></li><li><p>使用容器发布事件（订阅、通知）</p></li></ol><h3 id="拓展-EventListener注解"><a href="#拓展-EventListener注解" class="headerlink" title="拓展@EventListener注解"></a>拓展@EventListener注解</h3><p>为了加强@EventListener的功能，Spring 4.2开始支持使用SpEL表达式定义事件触发的条件。</p><p>下面为使用了该注解的的一个实例：</p><p>Event：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isImport;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestEvent</span><span class="params">(Object source, <span class="keyword">boolean</span> isImport)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(source);</span><br><span class="line">        <span class="keyword">this</span>.isImport = isImport;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isImport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isImport;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImport</span><span class="params">(<span class="keyword">boolean</span> anImport)</span> </span>&#123;</span><br><span class="line">        isImport = anImport;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TestEvent&#123;"</span> +</span><br><span class="line">                <span class="string">"isImport="</span> + isImport +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listener:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当isImport为true的时候才会打印</span></span><br><span class="line">    <span class="meta">@EventListener</span>(condition=<span class="string">"#testEvent.isImport"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestEventTest</span><span class="params">(TestEvent testEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==============TestEvent=============="</span> + testEvent.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓展Google-Guava中的EventBus"><a href="#拓展Google-Guava中的EventBus" class="headerlink" title="拓展Google Guava中的EventBus"></a>拓展Google Guava中的EventBus</h3><p>GoogleGuava是谷歌在日常开发过程中总结积累出来的一个类库，包含了许多常用的工具等。</p><p>Guava的优点：</p><ul><li>高效设计良好的API，被Google的开发者设计，实现和使用</li><li>遵循高效的java语法实践</li><li>使代码更刻度，简洁，简单</li><li>节约时间，资源，提高生产力</li></ul><p>Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：</p><ul><li>集合 [collections]</li><li>缓存 [caching]</li><li>原生类型支持 [primitives support]</li><li>并发库 [concurrency libraries]</li><li>通用注解 [common annotations]</li><li>字符串处理 [string processing]</li><li>I/O 等等。</li></ul><p>这里我们主要介绍Guava中的事件总线EventBus。使用Guava的事件总线就不用再像上面Spring中的继承实现接口的方法。只需要在指定的事件处理方法上加@Subscribe注解即可。</p><p>消息封装类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> message;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestEvent</span><span class="params">(<span class="keyword">int</span> message)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">        System.out.println(<span class="string">"event message:"</span>+message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息接收类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> lastMessage = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(TestEvent event)</span> </span>&#123;</span><br><span class="line">        lastMessage = event.getMessage();</span><br><span class="line">        System.out.println(<span class="string">"Message:"</span>+lastMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLastMessage</span><span class="params">()</span> </span>&#123;      </span><br><span class="line">        <span class="keyword">return</span> lastMessage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类及输出结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEventBus</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReceiveEvent</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        EventBus eventBus = <span class="keyword">new</span> EventBus(<span class="string">"test"</span>);</span><br><span class="line">        EventListener listener = <span class="keyword">new</span> EventListener();</span><br><span class="line"></span><br><span class="line">        eventBus.register(listener);</span><br><span class="line"></span><br><span class="line">        eventBus.post(<span class="keyword">new</span> TestEvent(<span class="number">200</span>));</span><br><span class="line">        eventBus.post(<span class="keyword">new</span> TestEvent(<span class="number">300</span>));</span><br><span class="line">        eventBus.post(<span class="keyword">new</span> TestEvent(<span class="number">400</span>));</span><br><span class="line"></span><br><span class="line">                                    System.out.println(<span class="string">"LastMessage:"</span>+listener.getLastMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出信息</span></span><br><span class="line">event message:<span class="number">200</span></span><br><span class="line">Message:<span class="number">200</span></span><br><span class="line">event message:<span class="number">300</span></span><br><span class="line">Message:<span class="number">300</span></span><br><span class="line">event message:<span class="number">400</span></span><br><span class="line">Message:<span class="number">400</span></span><br><span class="line">LastMessage:<span class="number">400</span></span><br></pre></td></tr></table></figure><p>以上即是EventBus的简单使用。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h3><p><a href="https://shimo.im/docs/z7ggA56biOAfAdht/read" target="_blank" rel="noopener">https://shimo.im/docs/z7ggA56biOAfAdht/read</a></p><p><a href="https://www.cnblogs.com/peida/p/EventBus.html" target="_blank" rel="noopener">https://www.cnblogs.com/peida/p/EventBus.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring中的事件简述与Guava的EventBus&quot;&gt;&lt;a href=&quot;#Spring中的事件简述与Guava的EventBus&quot; class=&quot;headerlink&quot; title=&quot;Spring中的事件简述与Guava的EventBus&quot;&gt;&lt;/a&gt;Sprin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于二分查找（折半查找）的即记录</title>
    <link href="http://yoursite.com/posts/1/"/>
    <id>http://yoursite.com/posts/1/</id>
    <published>2019-06-05T07:36:18.000Z</published>
    <updated>2019-06-05T07:47:40.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于二分查找（折半查找）的即记录"><a href="#关于二分查找（折半查找）的即记录" class="headerlink" title="关于二分查找（折半查找）的即记录"></a>关于二分查找（折半查找）的即记录</h2><p>之前其实也学习过二分查找的理念，但是一直有一个模糊的地方就是中间元素的选取。</p><p>二分查找需要的数组需要是有序的。</p><h3 id="二分查找的步骤"><a href="#二分查找的步骤" class="headerlink" title="二分查找的步骤"></a>二分查找的步骤</h3><ol><li><p>确定数组的中间元素</p></li><li><p>将待查找元素与中间元素比较</p></li><li><p>如果大于中间元素，则到右边的数组查找，反之同理</p></li><li><p>如果中间元素等于待查找元素，那么查找成功。</p></li></ol><p>之前一直迷惑的一点就是第一步当中的中间元素的选取，因为数组会有两种情况，一种是元素的个数为偶数，另一种是数组元素个数为奇数。</p><p>今天到网上查找相关资料，才补上了这个基础的知识：</p><p>中间元素的选取可以使用如下公式：<code>mid = left + (right - left)/2;</code></p><p>这样不论当数组元素个数为偶数或者奇数的时候都可以正确选取到中间元素。</p><h3 id="二分查找的思想"><a href="#二分查找的思想" class="headerlink" title="二分查找的思想"></a>二分查找的思想</h3><p>其实二分查找是利用的算法设计思想中的 分治法，一步一步缩小查找范围，最终得到问题的解。</p><blockquote><p>分治法：将一个复杂的问题分解为多个相同或相似的子问题，再对子问题进行求解，进而得到问题的解。</p></blockquote><p>二分法的求解过程可以用二叉树来描述，对于一个有序的数组，根结点为最开始选取的中间元素，根结点的左右两个孩子分别为左数组的中间节点及右数组的中间节点，孩子的孩子同理；</p><p>所以通过查找树（判定树）可以看出查找的元素要经过几次比较以及跟哪些元素进行了比较。</p><h3 id="二分查找的时间复杂度"><a href="#二分查找的时间复杂度" class="headerlink" title="二分查找的时间复杂度"></a>二分查找的时间复杂度</h3><p>O(log2n)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于二分查找（折半查找）的即记录&quot;&gt;&lt;a href=&quot;#关于二分查找（折半查找）的即记录&quot; class=&quot;headerlink&quot; title=&quot;关于二分查找（折半查找）的即记录&quot;&gt;&lt;/a&gt;关于二分查找（折半查找）的即记录&lt;/h2&gt;&lt;p&gt;之前其实也学习过二分查找的理
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何给自己的网站添加小绿锁</title>
    <link href="http://yoursite.com/posts/2/"/>
    <id>http://yoursite.com/posts/2/</id>
    <published>2019-06-05T07:36:18.000Z</published>
    <updated>2019-06-05T07:47:46.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何给自己的网站添加小绿锁"><a href="#如何给自己的网站添加小绿锁" class="headerlink" title="如何给自己的网站添加小绿锁"></a>如何给自己的网站添加小绿锁</h1><h3 id="首先-要值得庆祝的是我的网站通过备案了"><a href="#首先-要值得庆祝的是我的网站通过备案了" class="headerlink" title="首先 要值得庆祝的是我的网站通过备案了"></a>首先 要值得庆祝的是我的网站通过备案了</h3><blockquote><p>之前我的博客是用的hexo博客，项目托管在github.io上，在本地使用Markdown写好文章 编译发布到git仓库就可以了。因此也无需备案。不过发现，github的访问速度不稳定，时快时慢就比较坑爹</p></blockquote><p>前一阵刚好赶上了阿里云的双11活动，直接298买了个最低配的3年，寻思买来放放博客，自己的小项目什么的都挺好。<br>刚好朋友最近推荐了一个java的开源博客项目 就是现在用的<a href="https://github.com/otale/tale" target="_blank" rel="noopener">tale</a>，而且hexo看久了 也腻了 而<a href="https://hexo.io/zh-cn/index.html" target="_blank" rel="noopener">hexo</a>且没有后台，要手写markdown然后手动编译再git push 挺麻烦的。<br>所以我就在阿里云上搭了这个tale。功能比较简洁明了，用的是内置sqlite，总共没有几张表。不依赖容器。<br>如何安装tale大家直接点连接进去看就可以了，很简单 傻瓜式操作。</p><h3 id="接下来讲讲如何给你的网站添加小绿锁"><a href="#接下来讲讲如何给你的网站添加小绿锁" class="headerlink" title="接下来讲讲如何给你的网站添加小绿锁"></a>接下来讲讲如何给你的网站添加小绿锁</h3><blockquote><p>以下提到两个证书供应商都提供免费的ssl DV证书，letsencrypt三个月需要续期，可以自动续期，阿里云免费一年。</p></blockquote><h4 id="使用letsencrypt"><a href="#使用letsencrypt" class="headerlink" title="使用letsencrypt"></a>使用letsencrypt</h4><p>给站点添加ssl比较热门和方便的一个方法就是使用<a href="https://letsencrypt.org/" target="_blank" rel="noopener">letsencrypt</a>的<a href="https://certbot.eff.org/" target="_blank" rel="noopener">Certbot</a>自动给你的站点添加证书。<br>进入到certbot网站可以看到支持的服务器以及系统，本人推荐使用nginx，配置比较方便。<br>大概过程就是连接到你的服务器，安装certbot，配置一下nginx就ok了。这里不多讲certbot的使用了，因为我用的是阿里云的证书。</p><h4 id="阿里云ssl证书"><a href="#阿里云ssl证书" class="headerlink" title="阿里云ssl证书"></a>阿里云ssl证书</h4><p>如果你的域名也是在阿里云购买的话，这个过程就会更加方便。</p><ol><li>在阿里云购买的域名–》直接进入阿里云控制台 –域名 点击管理，里面有申请免费的ssl证书。</li><li>不是在阿里云购买的域名就要在阿里云搜索ssl进入根据提示申请一个免费的ssl证书，这里相较于 1 麻烦的就是要手动验证域名的所有权。可能要添加一条text类型的解析记录。</li></ol><p>现在假定你已经申请好了证书，可以看到证书管理界面你的证书那里有个下载，点击他，下载完你会拿到一个压缩包，里面有量个主要的文件，一个是以crt结尾的证书文件，一个是以key结尾的私钥文件。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://www.wasea.top/upload/2018/12/rk70ohtp0oj4arkfruvig1f9nc.png" alt title>                </div>                <div class="image-caption"></div>            </figure>  <p>剩下的步骤 阿里云的官方文档已经讲的很清楚了，详见：<a href="https://help.aliyun.com/knowledge_detail/95491.html?spm=a2c4g.11186623.2.12.36cb34f1dJH8Rt" target="_blank" rel="noopener">Nginx/Tengine服务器安装SSL证书</a>。  Tomcat的也有，详见：<a href="https://help.aliyun.com/knowledge_detail/95496.html?spm=a2c4g.11186623.2.14.36cb34f12nayEU" target="_blank" rel="noopener">Tomcat服务器安装SSL证书</a></p><blockquote><p>有一点要注意的是https使用的是443端口，http默认是80端口，所以要到阿里云的安全组添加开放你的443端口</p></blockquote><h3 id="后续配置"><a href="#后续配置" class="headerlink" title="后续配置"></a>后续配置</h3><p>做完上边的工作，你的网站应该就可以使用<code>https://your.domain</code>来访问了~  但细心的小伙伴会发现一个问题，这里一定要手动加上https的头，为什么人家的网站都可以直接使用域名访问自动跳转到https呢，其实这里也是后台要配置一个转发，将http的请求全部全部转到https。<br>下边是我完整的nginx配置文件 供大家参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"># For more information on configuration, see:</span><br><span class="line">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="line">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span><br><span class="line">include /usr/share/nginx/modules/*.conf;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile            on;</span><br><span class="line">    tcp_nopush          on;</span><br><span class="line">    tcp_nodelay         on;</span><br><span class="line">    keepalive_timeout   65;</span><br><span class="line">    types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">    include             /etc/nginx/mime.types;</span><br><span class="line">    default_type        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    # Load modular configuration files from the /etc/nginx/conf.d directory.</span><br><span class="line">    # See http://nginx.org/en/docs/ngx_core_module.html#include</span><br><span class="line">    # for more information.</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80 default_server;</span><br><span class="line">        listen       [::]:80 default_server;</span><br><span class="line">        server_name  wasea.top www.wasea.top;</span><br><span class="line">        root         /usr/share/nginx/html;</span><br><span class="line">        rewrite ^(.*)$ https://$host$1 permanent;  # 重要的一个配置，可以自动转到https</span><br><span class="line">        # Load configuration files for the default server block.</span><br><span class="line">        include /etc/nginx/default.d/*.conf;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass http://localhost:9000; # 我的tale博客默认使用9000端口</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 404 /404.html;</span><br><span class="line">            location = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        error_page 500 502 503 504 /50x.html;</span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"># start aliyun ssl config</span><br><span class="line">server &#123;</span><br><span class="line"># listen 443;</span><br><span class="line"> listen       443 ssl http2 default_server;</span><br><span class="line"> listen       [::]:443 ssl http2 default_server;</span><br><span class="line"> server_name wasea.top www.wasea.top;</span><br><span class="line"> ssl on;</span><br><span class="line"> root html;</span><br><span class="line"> index index.html index.htm;</span><br><span class="line"> ssl_certificate   cert/a.pem;</span><br><span class="line"> ssl_certificate_key  cert/a.key;</span><br><span class="line"> ssl_session_timeout 5m;</span><br><span class="line"> ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"> ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"> ssl_prefer_server_ciphers on;</span><br><span class="line"> location / &#123;</span><br><span class="line">    add_header Content-Security-Policy upgrade-insecure-requests;</span><br><span class="line">    proxy_pass http://localhost:9000;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"># end aliyun ssl config</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>还有一点值得说的是，我这里省略了linux下一些细节的操作命令，例如给防火墙开放端口、安装nginx 等等其他，这些每个系统都有细微的区别，大家根据自己的系统来操作就好了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何给自己的网站添加小绿锁&quot;&gt;&lt;a href=&quot;#如何给自己的网站添加小绿锁&quot; class=&quot;headerlink&quot; title=&quot;如何给自己的网站添加小绿锁&quot;&gt;&lt;/a&gt;如何给自己的网站添加小绿锁&lt;/h1&gt;&lt;h3 id=&quot;首先-要值得庆祝的是我的网站通过备案了&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解MyBatis（一）</title>
    <link href="http://yoursite.com/posts/4/"/>
    <id>http://yoursite.com/posts/4/</id>
    <published>2019-06-05T07:36:18.000Z</published>
    <updated>2019-06-05T07:48:06.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深入理解MyBatis（一）"><a href="#深入理解MyBatis（一）" class="headerlink" title="深入理解MyBatis（一）"></a>深入理解MyBatis（一）</h1><h2 id="MyBatis的基本运行过程"><a href="#MyBatis的基本运行过程" class="headerlink" title="MyBatis的基本运行过程"></a>MyBatis的基本运行过程</h2><ol><li><p>输入配置文件的文件流</p></li><li><p>使用SqlSessionFactoryBuilder根据配置文件创建SqlSessionFactory</p></li><li><p>通过SqlSessionFactory获取会话SqlSession</p></li><li><p>从SqlSession获取Executor</p></li><li><p>Executor读取并执行sql语句</p></li><li><p>StatementHandler处理jdbc的statement交互</p></li><li><p>TypeHandler负责设置参数</p></li><li><p>使用jdbc与数据库进行交互</p></li><li><p>jdbc返回结果集-》TypeHandler-》ResultHandler-》StatementHandler-》Executor-》SqlSession</p></li></ol><p>上述过程使用图片来描述会比较清晰。</p><h2 id="MyBatis的缓存机制"><a href="#MyBatis的缓存机制" class="headerlink" title="MyBatis的缓存机制"></a>MyBatis的缓存机制</h2><h3 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h3><p>Executor在Mybatis中扮演者非常重要的一个角色，除了用来控制执行sql返回结果之外，它还有一个重要的指责就是缓存的管理。</p><p>在一个SqlSession的会话中，如果使用了同样的sql以及同样的参数两次以上，那么在第二次查询的时候就会命中mybatis的一级缓存，不再次查库；</p><p>在这个session会话中，如果有进行增删改操作，那么mybatis就会刷新缓存避免脏读现象的发生；</p><blockquote><p>一级缓存在Mybatis中是默认开启的。</p></blockquote><h3 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h3><p>二级缓存在Mybatis中其实也是默认开启的，二级缓存对应的配置项为<code>&lt;setting  name=&quot;cacheEnabled&quot;  value=&quot;true&quot;/&gt;</code> ，但是如果想要使用二级缓存需要在对应的mapper文件中加上如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启mapper的二级缓存， type:指定cache接口的实现类，mybatis默认使用PerpetualCache 要和ehcache整合，需要配置type为ehcache实现cache接口的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span> <span class="attr">type</span>=<span class="string">"org.mybatis.caches.ehcache.EhcacheCache"</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果不需要指定忽略type参数就可以了: <code>&lt;cache/&gt;</code>。</p><p>关于二级缓存的划分：既可以每个mapper使用自己的空间，也可以多个mapper共享一个空间（使用<code>&lt;cache-ref namespace=&quot;xx&quot;/&gt;</code>来配置）。</p><p>Mybatis对二级缓存的粒度控制很细，所以如果想要使用二级缓存，需要在指定的select标签中开启对该条语句进行缓存<code>cacheEnabled=true</code>。</p><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>Mybatis实现二级缓存使用了装饰器模式，使用CachingExecutor装饰了Executor；从上文我们可以知道Executor控制了一级缓存，所以我们可以发现在一二级缓存同时开启式，mybatis是会优先使用二级缓存的。</p><blockquote><p>最后：关于实际应用中的缓存原则：尽量离客户端近；能用cdn的就cdn，能在nginx缓存的就在nginx缓存，接下来在控制层，业务层进行缓存，基本上在实际应用中不会使用到数据库级别的缓存。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深入理解MyBatis（一）&quot;&gt;&lt;a href=&quot;#深入理解MyBatis（一）&quot; class=&quot;headerlink&quot; title=&quot;深入理解MyBatis（一）&quot;&gt;&lt;/a&gt;深入理解MyBatis（一）&lt;/h1&gt;&lt;h2 id=&quot;MyBatis的基本运行过程&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域资源共享CORS 详解</title>
    <link href="http://yoursite.com/posts/5/"/>
    <id>http://yoursite.com/posts/5/</id>
    <published>2019-06-05T07:36:18.000Z</published>
    <updated>2019-06-05T07:48:18.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="跨域资源共享CORS-详解"><a href="#跨域资源共享CORS-详解" class="headerlink" title="跨域资源共享CORS 详解"></a>跨域资源共享CORS 详解</h1><p><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/04/cors.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;跨域资源共享CORS-详解&quot;&gt;&lt;a href=&quot;#跨域资源共享CORS-详解&quot; class=&quot;headerlink&quot; title=&quot;跨域资源共享CORS 详解&quot;&gt;&lt;/a&gt;跨域资源共享CORS 详解&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.ruanyi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于token机制与JWT标准</title>
    <link href="http://yoursite.com/posts/33574/"/>
    <id>http://yoursite.com/posts/33574/</id>
    <published>2019-06-05T07:36:18.000Z</published>
    <updated>2019-06-05T07:49:13.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于token机制与JWT标准"><a href="#关于token机制与JWT标准" class="headerlink" title="关于token机制与JWT标准"></a>关于token机制与JWT标准</h1><p>在传统的web单体项目中，我们的会话通常使用session和cookie两样来实现。</p><h2 id="传统的cookie-session实现"><a href="#传统的cookie-session实现" class="headerlink" title="传统的cookie/session实现"></a>传统的cookie/session实现</h2><p>session是保存在服务器端的会话，使用cookie在客户端保存一个session id，每次发送请求的时候带上这个cookie服务端就可以很容易的了解当前用户是否与服务端建立了会话，以及会话是否过期等等。在单体项目中的这种实现机制相对来说是比较方便的。</p><p>使用这种机制存在的问题：</p><ol><li><p>当我们的项目变得越来越大，用户数量越来越多之后，每新建一个会话服务器就要多消耗空间来存储空间，这将使服务器内存的开销不断增加；</p></li><li><p>跨域问题，很多项目使用前后端分离开发，而且前后端也部署在不同的域，这将导致一系列跨域问题的发生；</p></li><li><p>可拓展性，只在服务器内存中存储session限制了可拓展性能；</p></li></ol><p>针对以上痛点，token机制的出现很好的解决了问题。</p><h2 id="token机制"><a href="#token机制" class="headerlink" title="token机制"></a>token机制</h2><p>使用token机制时，当用户请求时，会检查用户是否有携带token信息，或者token是否过期；未登录的话叫用户进行登录，然后服务端生成一串token返回给浏览器，可以存储在cookie或者localStorage里面。以后用户每一次发送的请求都会带上这个token。</p><p>token的组成一般是一些基础的信息，加上一个签名。这样服务器就无需存储session，每当收到一个新的请求，对token的签名进行验证，验证成功就可以进行下一步的操作。而且通常token可以存储在数据库中。</p><h2 id="JWT（Json-Web-Token）"><a href="#JWT（Json-Web-Token）" class="headerlink" title="JWT（Json Web Token）"></a>JWT（Json Web Token）</h2><p>广义上的jwt其实是token机制的一个实现标准，狭义上的jwt即是我们每次请求携带的token串。</p><p>jwt串由3部分组成，下面是一个例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.</span><br><span class="line">eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.</span><br><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p>第一部分为header为json格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;    </span><br><span class="line">  <span class="string">"alg"</span>: <span class="string">"HS256"</span>, 加密算法类型</span><br><span class="line">  <span class="string">"typ"</span>: <span class="string">"JWT"</span> token类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分为payload 同样为json：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;, 保留claim subject代表这个jwt的主体</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;, 自定义的claim</span><br><span class="line">  &quot;iat&quot;: 1516239022 保留claim 时间戳 代表jwt的签发时间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三部分就是用header中指定的算法结合payload的内容制造出的签名。</p><blockquote><p>jwt串只是使用base64编码，并没有进行加密，所以任何人获取到jwt串都可以拿到其中传输的内容。</p></blockquote><p>当服务端获取到这一tokne之后，会有如下事件流：</p><ol><li><p>使用base64将jwt串进行还原</p></li><li><p>使用header中的算法对签名部分进行还原</p></li><li><p>对比直接从jwt中解析出的payload部分和使用算法还原的payload</p><ol><li><p>如果不一致 验证失败</p></li><li><p>一致则验证成功</p></li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>token机制是针对无状态的http比较好的一个会话管理机制；对前后端分离项目、用户量大的项目都更加友好；对移动端的支持也更好。</p><p>参考资料：</p><p><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></p><p><a href="https://www.cnblogs.com/moyand/p/9047978.html" target="_blank" rel="noopener">https://www.cnblogs.com/moyand/p/9047978.html</a></p><p><a href="https://www.cnblogs.com/lyzg/p/6028341.html" target="_blank" rel="noopener">https://www.cnblogs.com/lyzg/p/6028341.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于token机制与JWT标准&quot;&gt;&lt;a href=&quot;#关于token机制与JWT标准&quot; class=&quot;headerlink&quot; title=&quot;关于token机制与JWT标准&quot;&gt;&lt;/a&gt;关于token机制与JWT标准&lt;/h1&gt;&lt;p&gt;在传统的web单体项目中，我们的会话
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区间</title>
    <link href="http://yoursite.com/posts/3/"/>
    <id>http://yoursite.com/posts/3/</id>
    <published>2019-02-03T04:33:18.000Z</published>
    <updated>2019-06-05T07:48:44.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区间"><a href="#小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区间" class="headerlink" title="小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区间"></a>小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区间</h1><h4 id="最近在做公司项目的时候，有一个需求是需要传入一个开始时间和一个结束时间。但是要按照统计的方式分别以日、周、月、季、年的方式来分组进行统计。"><a href="#最近在做公司项目的时候，有一个需求是需要传入一个开始时间和一个结束时间。但是要按照统计的方式分别以日、周、月、季、年的方式来分组进行统计。" class="headerlink" title="最近在做公司项目的时候，有一个需求是需要传入一个开始时间和一个结束时间。但是要按照统计的方式分别以日、周、月、季、年的方式来分组进行统计。"></a>最近在做公司项目的时候，有一个需求是需要传入一个开始时间和一个结束时间。但是要按照统计的方式分别以日、周、月、季、年的方式来分组进行统计。</h4><h4 id="这个问题其实有两个解决方案，一个是利用sql处理日期的字段格式化进行分组；另一种就是写一个通用一点的SQL，然后在service里处理这些日期，遍历调用这个接口。"><a href="#这个问题其实有两个解决方案，一个是利用sql处理日期的字段格式化进行分组；另一种就是写一个通用一点的SQL，然后在service里处理这些日期，遍历调用这个接口。" class="headerlink" title="这个问题其实有两个解决方案，一个是利用sql处理日期的字段格式化进行分组；另一种就是写一个通用一点的SQL，然后在service里处理这些日期，遍历调用这个接口。"></a>这个问题其实有两个解决方案，一个是利用sql处理日期的字段格式化进行分组；另一种就是写一个通用一点的SQL，然后在service里处理这些日期，遍历调用这个接口。</h4><h4 id="由于我们的需求对时间的要求比较复杂，并不可以按照自然月的方式进行统计，而是上个月26到本月25日为一个周期。比如统计2019年1月，实际上的开始和结束时间为：2018-12-26-2019-01-25。也正是因为这点，使用sql分组的方式就更加难以实现。"><a href="#由于我们的需求对时间的要求比较复杂，并不可以按照自然月的方式进行统计，而是上个月26到本月25日为一个周期。比如统计2019年1月，实际上的开始和结束时间为：2018-12-26-2019-01-25。也正是因为这点，使用sql分组的方式就更加难以实现。" class="headerlink" title="由于我们的需求对时间的要求比较复杂，并不可以按照自然月的方式进行统计，而是上个月26到本月25日为一个周期。比如统计2019年1月，实际上的开始和结束时间为：2018-12-26~2019-01-25。也正是因为这点，使用sql分组的方式就更加难以实现。"></a>由于我们的需求对时间的要求比较复杂，并不可以按照自然月的方式进行统计，而是上个月26到本月25日为一个周期。比如统计2019年1月，实际上的开始和结束时间为：2018-12-26~2019-01-25。也正是因为这点，使用sql分组的方式就更加难以实现。</h4><h4 id="所以我选用了第一个解决方案，就是在业务里处理这些时间。遂萌生了写这个工具类的想法。"><a href="#所以我选用了第一个解决方案，就是在业务里处理这些时间。遂萌生了写这个工具类的想法。" class="headerlink" title="所以我选用了第一个解决方案，就是在业务里处理这些时间。遂萌生了写这个工具类的想法。"></a>所以我选用了第一个解决方案，就是在业务里处理这些时间。遂萌生了写这个工具类的想法。</h4><h4 id="因为我们的业务需求比较特殊，所以下边贴上的代码还是按照自然月来处理的。"><a href="#因为我们的业务需求比较特殊，所以下边贴上的代码还是按照自然月来处理的。" class="headerlink" title="因为我们的业务需求比较特殊，所以下边贴上的代码还是按照自然月来处理的。"></a>因为我们的业务需求比较特殊，所以下边贴上的代码还是按照自然月来处理的。</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传开始和结束日期 按日、周、月、季、年分割成一些时间区间</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateSeparateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按日分隔</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForQuery 分隔好的时间区间 一个startTime和endTime为一组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForShow  显示在横轴的时间区间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separateByDay</span><span class="params">(Date startTime, Date endTime, SimpleDateFormat format, List&lt;Map&lt;String, String&gt;&gt; timeForQuery, List&lt;String&gt; timeForShow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeForQuery == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForQuery = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeForShow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForShow = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Calendar start = Calendar.getInstance();</span><br><span class="line">        start.setTime(startTime);</span><br><span class="line">        Calendar end = Calendar.getInstance();</span><br><span class="line">        end.setTime(endTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start.getTimeInMillis() &lt; end.getTimeInMillis()) &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            String startStr = format.format(<span class="keyword">new</span> Date(start.getTimeInMillis()));</span><br><span class="line">            map.put(<span class="string">"startTime"</span>, startStr + <span class="string">" 00:00:00"</span>); <span class="comment">// 按天算的话 开始和结束就是同一天</span></span><br><span class="line">            map.put(<span class="string">"endTime"</span>, startStr + <span class="string">" 23:59:59"</span>);</span><br><span class="line">            timeForQuery.add(map);</span><br><span class="line">            timeForShow.add(startStr.substring(<span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">            start.add(Calendar.DAY_OF_YEAR, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按星期分隔</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForShow</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separateByWeek</span><span class="params">(Date startTime, Date endTime, SimpleDateFormat format, List&lt;Map&lt;String, String&gt;&gt; timeForQuery, List&lt;String&gt; timeForShow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeForQuery == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForQuery = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeForShow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForShow = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        Calendar start = Calendar.getInstance();</span><br><span class="line">        start.setFirstDayOfWeek(Calendar.MONDAY);</span><br><span class="line">        start.setTime(startTime);</span><br><span class="line">        Calendar end = Calendar.getInstance();</span><br><span class="line">        end.setTime(endTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start.getTimeInMillis() &lt; end.getTimeInMillis()) &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            String startStr = format.format(<span class="keyword">new</span> Date(start.getTimeInMillis()));</span><br><span class="line">            map.put(<span class="string">"startTime"</span>, startStr + <span class="string">" 00:00:00"</span>);</span><br><span class="line">            start.add(Calendar.DAY_OF_WEEK, <span class="comment">/*start.getActualMaximum(Calendar.DAY_OF_WEEK)*/</span><span class="number">8</span> - start.get(Calendar.DAY_OF_WEEK));</span><br><span class="line">            <span class="keyword">if</span> (start.getTimeInMillis() &gt; end.getTimeInMillis()) &#123;</span><br><span class="line">                <span class="comment">// 结束日期不能超过传来的最后日期</span></span><br><span class="line">                start.setTimeInMillis(end.getTimeInMillis());</span><br><span class="line">            &#125;</span><br><span class="line">            String weekEnd = format.format(<span class="keyword">new</span> Date(start.getTimeInMillis()));</span><br><span class="line">            map.put(<span class="string">"endTime"</span>, weekEnd + <span class="string">" 23:59:59"</span>);</span><br><span class="line">            timeForQuery.add(map);</span><br><span class="line">            timeForShow.add(startStr.substring(<span class="number">5</span>, <span class="number">10</span>) + <span class="string">"/"</span> + weekEnd.substring(<span class="number">5</span>, <span class="number">10</span>));</span><br><span class="line">            <span class="comment">// 加一天到下一周</span></span><br><span class="line">            start.add(Calendar.DAY_OF_WEEK, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按月分割</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForShow</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separateByMonth</span><span class="params">(Date startTime, Date endTime, SimpleDateFormat format, List&lt;Map&lt;String, String&gt;&gt; timeForQuery, List&lt;String&gt; timeForShow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeForQuery == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForQuery = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeForShow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForShow = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        Calendar start = Calendar.getInstance();</span><br><span class="line">        start.setTime(startTime);</span><br><span class="line">        Calendar end = Calendar.getInstance();</span><br><span class="line">        end.setTime(endTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start.getTimeInMillis() &lt; end.getTimeInMillis()) &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            String startStr = format.format(<span class="keyword">new</span> Date(start.getTimeInMillis()));</span><br><span class="line">            map.put(<span class="string">"startTime"</span>, startStr + <span class="string">" 00:00:00"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// region 按照自然月方式处理</span></span><br><span class="line">             start.set(Calendar.DAY_OF_MONTH, start.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">            <span class="comment">// endregion</span></span><br><span class="line">            <span class="keyword">if</span> (start.getTimeInMillis() &gt; end.getTimeInMillis()) &#123;</span><br><span class="line">                start.setTimeInMillis(end.getTimeInMillis());<span class="comment">// 不能超过end时期</span></span><br><span class="line">            &#125;</span><br><span class="line">            Date monthEnd = <span class="keyword">new</span> Date(start.getTimeInMillis());</span><br><span class="line">            map.put(<span class="string">"endTime"</span>, format.format(monthEnd) + <span class="string">" 23:59:59"</span>);</span><br><span class="line">            timeForQuery.add(map);</span><br><span class="line">            timeForShow.add(format.format(monthEnd).substring(<span class="number">2</span>, <span class="number">7</span>));</span><br><span class="line">            start.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>); <span class="comment">// 跳到下一天</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按季度拆分</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForShow</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separateByQuarter</span><span class="params">(Date startTime, Date endTime, SimpleDateFormat format, List&lt;Map&lt;String, String&gt;&gt; timeForQuery, List&lt;String&gt; timeForShow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeForQuery == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForQuery = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeForShow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForShow = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        Calendar start = Calendar.getInstance();</span><br><span class="line">        start.setTime(startTime);</span><br><span class="line">        Calendar end = Calendar.getInstance();</span><br><span class="line">        end.setTime(endTime);</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; quarter1 = Arrays.asList(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        List&lt;Integer&gt; quarter2 = Arrays.asList(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        List&lt;Integer&gt; quarter3 = Arrays.asList(<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        List&lt;Integer&gt; quarter4 = Arrays.asList(<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start.getTimeInMillis() &lt; end.getTimeInMillis()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> curMonth = start.get(Calendar.MONTH); <span class="comment">// 0-11</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 处理第一季度的月份</span></span><br><span class="line">            <span class="keyword">if</span> (quarter1.contains(curMonth)) &#123;</span><br><span class="line">                handleQuarterOnce(quarter1, <span class="number">1</span>, timeForQuery, timeForShow, format, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理第二季度的月份</span></span><br><span class="line">            <span class="keyword">if</span> (quarter2.contains(curMonth)) &#123;</span><br><span class="line">                handleQuarterOnce(quarter2, <span class="number">2</span>, timeForQuery, timeForShow, format, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理第三季度的月份</span></span><br><span class="line">            <span class="keyword">if</span> (quarter3.contains(curMonth)) &#123;</span><br><span class="line">                handleQuarterOnce(quarter3, <span class="number">3</span>, timeForQuery, timeForShow, format, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 处理第四季度的月份</span></span><br><span class="line">            <span class="keyword">if</span> (quarter4.contains(curMonth)) &#123;</span><br><span class="line">                handleQuarterOnce(quarter4, <span class="number">4</span>, timeForQuery, timeForShow, format, start, end);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按年分隔</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForShow</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">separateByYear</span><span class="params">(Date startTime, Date endTime, SimpleDateFormat format, List&lt;Map&lt;String, String&gt;&gt; timeForQuery, List&lt;String&gt; timeForShow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeForQuery == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForQuery = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (timeForShow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            timeForShow = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        Calendar start = Calendar.getInstance();</span><br><span class="line">        start.setTime(startTime);</span><br><span class="line">        Calendar end = Calendar.getInstance();</span><br><span class="line">        end.setTime(endTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (start.getTimeInMillis() &lt; end.getTimeInMillis()) &#123;</span><br><span class="line">            HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            String startStr = format.format(<span class="keyword">new</span> Date(start.getTimeInMillis()));</span><br><span class="line">            map.put(<span class="string">"startTime"</span>, startStr + <span class="string">" 00:00:00"</span>);</span><br><span class="line">            <span class="comment">// region按自然月处理</span></span><br><span class="line">            start.set(Calendar.DAY_OF_YEAR, start.getActualMaximum(Calendar.DAY_OF_YEAR));</span><br><span class="line">            <span class="comment">// endregion</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (start.getTimeInMillis() &gt; end.getTimeInMillis()) &#123;</span><br><span class="line">                start.setTimeInMillis(end.getTimeInMillis());</span><br><span class="line">            &#125;</span><br><span class="line">            String yearEnd = format.format(<span class="keyword">new</span> Date(start.getTimeInMillis()));</span><br><span class="line">            map.put(<span class="string">"endTime"</span>, yearEnd + <span class="string">" 23:59:59"</span>);</span><br><span class="line">            timeForQuery.add(map);</span><br><span class="line">            timeForShow.add(yearEnd.substring(<span class="number">0</span>, <span class="number">4</span>));</span><br><span class="line">            start.add(Calendar.DAY_OF_YEAR, <span class="number">1</span>);<span class="comment">// 跳下一天</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**************************************************私有方法*********************************************************/</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 近供分割季度的方法使用</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> monthInQuarter List&lt;Integer&gt; quarter1 = Arrays.asList(0, 1, 2);</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> quarter        1\2\3\4</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForQuery</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeForShow</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> format</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleQuarterOnce</span><span class="params">(List&lt;Integer&gt; monthInQuarter, <span class="keyword">int</span> quarter, List&lt;Map&lt;String, String&gt;&gt; timeForQuery,</span></span></span><br><span class="line"><span class="function"><span class="params">                                          List&lt;String&gt; timeForShow, SimpleDateFormat format, Calendar start, Calendar end)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        String startStr = format.format(start.getTimeInMillis());</span><br><span class="line">        map.put(<span class="string">"startTime"</span>, startStr + <span class="string">" 00:00:00"</span>);</span><br><span class="line">        <span class="comment">// 设置为季度最后一天</span></span><br><span class="line">        <span class="comment">// region 自然月的方式处理</span></span><br><span class="line">        start.set(Calendar.MONTH, monthInQuarter.get(<span class="number">2</span>));</span><br><span class="line">        start.set(Calendar.DAY_OF_MONTH, start.getActualMaximum(Calendar.DAY_OF_MONTH));</span><br><span class="line">        <span class="comment">// endregion</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 防止超出时间范围</span></span><br><span class="line">        <span class="keyword">if</span> (start.getTimeInMillis() &gt; end.getTimeInMillis()) &#123;</span><br><span class="line">            start.setTimeInMillis(end.getTimeInMillis());</span><br><span class="line">        &#125;</span><br><span class="line">        String quarterEnd = format.format(<span class="keyword">new</span> Date(start.getTimeInMillis()));</span><br><span class="line">        map.put(<span class="string">"endTime"</span>, quarterEnd + <span class="string">" 23:59:59"</span>);</span><br><span class="line">        timeForQuery.add(map);</span><br><span class="line">        timeForShow.add(quarterEnd.substring(<span class="number">0</span>, <span class="number">4</span>) + <span class="string">"年"</span> + quarter + <span class="string">"季度"</span>);</span><br><span class="line">        start.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);<span class="comment">// +1天</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*****************************************************测试*********************************************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Calendar instance = Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.DAY_OF_YEAR, <span class="number">300</span>);</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"><span class="comment">//        Date now = new Date();</span></span><br><span class="line"><span class="comment">//        Date end = new Date(instance.getTimeInMillis());</span></span><br><span class="line">        Date now = format.parse(<span class="string">"2017-09-26"</span>);</span><br><span class="line">        Date end = format.parse(<span class="string">"2019-04-20"</span>);</span><br><span class="line"><span class="comment">//        List&lt;Map&lt;String, String&gt;&gt; maps = separateByDay(new Date(), new Date(instance.getTimeInMillis()), format);</span></span><br><span class="line"><span class="comment">//        System.out.println(maps);</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Map&lt;String, String&gt;&gt; timeForQuery = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; timeForShow = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//        separateByWeek(now, end, format, timeForQuery, timeForShow);</span></span><br><span class="line"><span class="comment">//        separateByMonth(now, end, format, timeForQuery, timeForShow);</span></span><br><span class="line"><span class="comment">//        assert (!ObjectUtils.hasLength(timeForQuery)):"OJBK";</span></span><br><span class="line"><span class="comment">//        separateByQuarter(now, end, format, timeForQuery, timeForShow);</span></span><br><span class="line">        separateByYear(now, end, format, timeForQuery, timeForShow);</span><br><span class="line">        System.out.println(timeForQuery);</span><br><span class="line">        System.out.println(timeForShow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区间&quot;&gt;&lt;a href=&quot;#小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区间&quot; class=&quot;headerlink&quot; title=&quot;小工具：将传入的日期区间按日、周、月、季、年分隔成多个时间区
      
    
    </summary>
    
    
  </entry>
  
</feed>
